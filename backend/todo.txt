Password Reset:
    1. Generate a Random Token.
        A. Token is random with no details.
        B. Created when user request password reset.
        C. Token will be stored server side in a database as a hashed value.
            1. Database will have Hashed Token
            2. Requester Email
            3. Expertation timestamp
        D. User will browse to Endpoint: ./user/password_reset/{token}
        E. Token will be verified to exist in database.
            1. If token doesn't exist.
                i. Hard stop
            2. If token exist
                i. User will be allowed to reset password
        F. Tokens will be checked for expiration.
        G. Once password is reset token will be deleted.
    
Database needs a trigger to delete expired tokens
    1. https://stackoverflow.com/questions/26046816/is-there-a-way-to-set-an-expiry-time-after-which-a-data-entry-is-automaticall

Setup Access Token Expiring Logic
    1. Current tokens have expire date and timestamps are compared.
        A. Look in token_verify() in token_handling.py functions check_if_token_expired()
    
Finish search_user route.

